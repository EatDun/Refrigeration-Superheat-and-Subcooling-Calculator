import java.util.Scanner;
import java.lang.Math;

class main {
    
    	//Adjusts values to PSIA
	public static double psiaAdj(double num) {
    	double add = num + 14.696;
    	return add;
	}
    
    	//Adjusts values from rankin to fahrenheit
	public static double rankinAdj(double num) {
    	double sub = num - 459.67;
    	return sub;
	}
   	 
    	//Equation to solve saturation pressure from saturation temperature
	public static double ptEquationS(double num) {
    	double pt = Math.pow(10, 29.35754453 - 3845.193152 / num - 7.86103122 * Math.log10(num)  +0.002190939044 * num + (305.8268131 * (686.1 - num)) / (686.1 * num) * Math.log10(686.1 - num));
    	return pt;
	}
   	 
    	//Returns string/boolean for midpoint approximation
	public static String comparePoints(double num1, double num2) {
    	if (num1 < num2) {
        	return "Over";
    	}
    	else {
        	return "Under";
    	}
	}
    
    	//Returns the midpoint between two values
	public static double midFinder(double num1, double num2) {
    	double mid = (num1 + num2) / 2;
    	return mid;
	}
    
    	//Returns the percentage difference of two variables
	public static double errorFind(double num1, double num2) {
    	return Math.abs((num1 - num2) / num2) * 100;
	}
	
	    //Subtracts for final value
	public static double finalSub(double num1, double num2) {
	    return num1 - num2;
	}
    
    	//Performs bisection
	public static double bisection(double numL, double numR, double numSolve) {
    	while(true) {
        	if(errorFind(ptEquationS(midFinder(numL, numR)), numSolve) < .000000000001) {
            	return midFinder(numL, numR);
        	}
        	else {
            	if(comparePoints(ptEquationS(midFinder(numL, numR)), numSolve) == "Over") {
                	numL = midFinder(numL, numR);
            	}
            	else if(comparePoints(ptEquationS(midFinder(numL, numR)), numSolve) == "Under") {
                	numR = midFinder(numL, numR);
            	}
        	}
    	}
	}
   	 
	public static void main(String[] args) {
	    
	        //Array that stores constant values
        double[] maxPressure = {707.21, 699.804};
	    
        	//Creating a scanner for user input
    	Scanner myObj = new Scanner(System.in);
    
        	//Asking for user input
    	System.out.println("\nEnter Liquid Line Pressure\nEnter Liquid Line Temperature\nEnter Vapor Line Pressure\nEnter Vapor Line Temperature\n");

        	//Assigning variables to user input
    	double liquidLinePress = myObj.nextDouble();
    	double liquidLineTemp = myObj.nextDouble();
    	double vaporLinePress = myObj.nextDouble();
    	double vaporLineTemp = myObj.nextDouble();
   	 
    	if(liquidLinePress > maxPressure[0] || vaporLinePress > maxPressure[0]) {
        	System.out.println("Gauge reading is above critical pressure");
    	}
    	else if(liquidLinePress < 0 || vaporLinePress < 0) {
        	System.out.println("Charged system pressure cannot be below zero PSIG");
    	}
    
           	//Adjusting inputs
    	double liquidLinePressAdjPSIA = psiaAdj(liquidLinePress);
    	double vaporLinePressAdjPSIA = psiaAdj(vaporLinePress);
   	 
        	//Math variables
        double[] RLos = {418.3339585682146, 69};
        double[] RHis = {664.5086257144121, 420};
    	double satRLo = RLos[0];
    	double satRHi = RHis[0];
    	double liquidSatR = bisection(satRLo, satRHi, liquidLinePressAdjPSIA);
    	double liquidSatF = rankinAdj(liquidSatR);
    	double vaporSatR = bisection(satRLo, satRHi, vaporLinePressAdjPSIA);
    	double vaporSatF = rankinAdj(vaporSatR);
    	double subCooling = finalSub(liquidSatF, liquidLineTemp);
    	double superHeat = finalSub(vaporLineTemp, vaporSatF);
       	 
        	//Giving results
    	if(subCooling < 0) {
        	System.out.println("Subcooling cannot be below zero");
    	}
    	else if(superHeat < 0) {
        	System.out.println("Superheat cannot be below zero");
    	}
    	else {
    	System.out.println("\nSubcooling is " + subCooling + "\nSuperheat is " + superHeat);
    	}
	}
}
//Created with help from,
//Andrew Pansulla and the Chemours Company
//JJ Martin of the University of Michigan
//Larry David of Washtenaw Community College
//Nirmal Patel of Learn Sense
//Brandon White
//Josh Levine of Josh.com
